{"version":3,"sources":["App.tsx","components/GoodList.tsx","index.tsx"],"names":["SortType","GoodsList","goods","map","good","goodsFromServer","App","useState","None","sortBy","setSortBy","isReverse","setIsReverse","preparedGoodsList","arr","Length","sort","a","b","length","Alphabet","localeCompare","reverse","sortPreparedGoods","className","type","classNames","onClick","ReactDOM","render","document","getElementById"],"mappings":"6KAqBKA,E,0ECfQC,EAA6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACxC,6BACGA,EAAMC,KAAI,SAAAC,GAAI,OACb,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,SDHjBC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAKGL,K,gBAAAA,E,oBAAAA,E,SAAAA,M,KAgCE,IAAMM,EAAgB,WAC3B,MAA4BC,mBAASP,EAASQ,MAA9C,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAkCH,oBAAS,GAA3C,mBAAOI,EAAP,KAAkBC,EAAlB,KAEMC,EA9BR,SACEC,EACAL,EACAE,GAEA,IAAME,EAAiB,YAAOC,GAE9B,OAAQL,GACN,KAAKT,EAASe,OACZF,EAAkBG,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,OAASD,EAAEC,UAC9C,MAEF,KAAKnB,EAASoB,SACZP,EAAkBG,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEI,cAAcH,MAUrD,OAJIP,GACFE,EAAkBS,UAGbT,EAOmBU,CACxBlB,EACAI,EACAE,GAGF,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CAAE,WAAYjB,IAAWT,EAASoB,WAEpCO,QAAS,kBAAMjB,EAAUV,EAASoB,WANpC,iCAWA,wBACEK,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,WAAYjB,IAAWT,EAASe,SAEpCY,QAAS,kBAAMjB,EAAUV,EAASe,SANpC,4BAWA,wBACEU,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,YAAaf,IAEjBgB,QAAS,kBAAMf,GAAcD,IAN/B,sBAWEF,GAAUE,IACV,wBACEc,KAAK,SACLD,UAAU,4BACVG,QAAS,WACPf,GAAa,GACbF,EAAUV,EAASQ,OALvB,sBAaJ,cAAC,EAAD,CAAWN,MAAOW,QE9GxBe,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.0d1ddd33.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport { GoodsList } from './components/GoodList';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ntype Goods = string[];\n\nenum SortType {\n  Length = 'length',\n  Alphabet = 'alphabet',\n  None = '',\n}\n\nfunction sortPreparedGoods(\n  arr: Goods,\n  sortBy: SortType,\n  isReverse: boolean,\n) {\n  const preparedGoodsList = [...arr];\n\n  switch (sortBy) {\n    case SortType.Length:\n      preparedGoodsList.sort((a, b) => a.length - b.length);\n      break;\n\n    case SortType.Alphabet:\n      preparedGoodsList.sort((a, b) => a.localeCompare(b));\n      break;\n\n    default:\n  }\n\n  if (isReverse) {\n    preparedGoodsList.reverse();\n  }\n\n  return preparedGoodsList;\n}\n\nexport const App: React.FC = () => {\n  const [sortBy, setSortBy] = useState(SortType.None);\n  const [isReverse, setIsReverse] = useState(false);\n\n  const preparedGoodsList = sortPreparedGoods(\n    goodsFromServer,\n    sortBy,\n    isReverse,\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-info',\n            { 'is-light': sortBy !== SortType.Alphabet },\n          )}\n          onClick={() => setSortBy(SortType.Alphabet)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-success',\n            { 'is-light': sortBy !== SortType.Length },\n          )}\n          onClick={() => setSortBy(SortType.Length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-warning',\n            { 'is-light': !isReverse },\n          )}\n          onClick={() => setIsReverse(!isReverse)}\n        >\n          Reverse\n        </button>\n\n        {(sortBy || isReverse) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setIsReverse(false);\n              setSortBy(SortType.None);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <GoodsList goods={preparedGoodsList} />\n    </div>\n  );\n};\n","import React from 'react';\n\ninterface Props {\n  goods: string[];\n}\n\nexport const GoodsList: React.FC<Props> = ({ goods }) => (\n  <ul>\n    {goods.map(good => (\n      <li data-cy=\"Good\" key={good}>{good}</li>\n    ))}\n  </ul>\n);\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}